{"version":3,"sources":["components/Grid/grid.module.css","components/Cell/cell.module.css","components/Controls/Button/button.module.css","components/Cell/cell.js","components/Grid/grid.js","components/Controls/Button/button.js","App.js","store/actions/actionTypes.js","serviceWorker.js","store/utility.js","store/reducer.js","index.js"],"names":["module","exports","Grid","Row","RowBorders","CellActive","CellInactive","Button","Cell","nextProps","alive","this","props","react_default","a","createElement","onClick","click","onMouseDown","mouseDown","onMouseUp","mouseUp","onMouseOver","mouseOver","className","classes","Component","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","drawing","setState","rowIndex","columnIndex","setCell","_this2","border","gridSize","cells","map","row","key","cell","cellIndex","Cell_cell","cellClicked","children","App","start","onStart","setTimeout","timer","stepDelay","stop","onStop","clearInterval","intervalId","onStep","running","resize","event","newSize","parseInt","target","value","onResize","changeDelay","newDelay","onChangeDelay","Button_button","onRegen","onClear","type","min","max","onChange","stepCount","timePerStep","grid","onToggleCell","onSetCell","connect","dispatch","size","delay","column","active","Boolean","window","location","hostname","match","updateObject","oldObject","updatedValues","objectSpread","genBlank","Array","i","j","initialState","startStep","newCellValue","number","r","c","wrapRow","wrapColumn","numberOfNeighbors","copyCells","oldSize","val","length","setCellHandler","getTimePerStep","stopTime","Date","getTime","Math","floor","startTime","regen","random","genRandom","reducer","arguments","undefined","action","step","clear","toggleCellHandler","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.05153b8b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Grid\":\"grid_Grid__1WhB_\",\"Row\":\"grid_Row__2qtXW\",\"RowBorders\":\"grid_RowBorders__2iwyV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellActive\":\"cell_CellActive__3f0j7\",\"CellInactive\":\"cell_CellInactive__2rMBE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__gAkba\"};","import React, {Component} from 'react';\nimport classes from './cell.module.css';\n\nclass Cell extends Component\n{\n    shouldComponentUpdate(nextProps){\n        return nextProps.alive !== this.props.alive;\n    }\n\n    render(){\n        return(\n            <div onClick={this.props.click} \n                onMouseDown={this.props.mouseDown}\n                onMouseUp={this.props.mouseUp}\n                onMouseOver={this.props.mouseOver}\n                className={this.props.alive ? classes.CellActive : classes.CellInactive}>\n            </div>\n        );\n    }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from '../Cell/cell'\nimport classes from './grid.module.css';\n\nclass Grid extends Component {\n\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            drawing: false\n        };\n    }\n        \n    mouseDown(){\n        this.setState({drawing: true});\n    }\n\n    mouseUp(){\n        this.setState({drawing: false});\n    }\n\n    mouseOver(rowIndex, columnIndex){\n        if(this.state.drawing){\n            this.props.setCell(rowIndex, columnIndex, 1);\n        }\n    }\n\n    render(){\n        const border = this.props.gridSize < 125;\n        return (\n            <div className={classes.Grid}>\n            {\n                this.props.cells.map((row, rowIndex) => {\n                    return ( \n                        <div className={classes.Row + \" \" + (border ? classes.RowBorders : \"\")} key={rowIndex}>\n                            {\n                                row.map((cell, cellIndex) => {\n                                    return <Cell \n                                                click={() => this.props.cellClicked(rowIndex, cellIndex)}\n                                                mouseDown={() => this.mouseDown()}\n                                                mouseUp={() => this.mouseUp()} \n                                                mouseOver={() => this.mouseOver(rowIndex, cellIndex)}\n                                                alive={cell}\n                                                key={cellIndex}>\n                                            </Cell>\n                                })\n                            }\n                        </div>\n                    )\n                })\n            }\n            </div>\n        );\n    }\n}\n\nexport default Grid;","import React from 'react';\nimport classes from './button.module.css';\n\nconst Button = (props) => {\n    return <button className={classes.Button} onClick={props.click}>{props.children}</button>\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Grid from './components/Grid/grid';\nimport Button from './components/Controls/Button/button';\nimport * as actionTypes from './store/actions/actionTypes';\n\nclass App extends Component {\n  intervalId;\n\n  start = (onStart) => {\n    setTimeout(this.timer, this.props.stepDelay);\n    this.props.onStart();\n  }\n\n  stop = (onStop) => {\n    clearInterval(this.intervalId);\n    this.props.onStop();\n  }\n\n  timer = () => {\n    this.props.onStep();\n    if (this.props.running) {\n      setTimeout(this.timer, this.props.stepDelay);\n    }\n  }\n\n  resize = (event) => {\n    let newSize = parseInt(event.target.value);\n    this.props.onResize(newSize);\n  }\n\n  changeDelay = (event) => {\n    let newDelay = parseInt(event.target.value);\n    this.props.onChangeDelay(newDelay);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header></header>\n        <div className=\"body\">\n          <div className=\"leftControls\">\n            <span>React Game of Life</span>\n            <Button click={this.start}>Start</Button>\n            <Button click={this.stop}>Stop</Button>\n            <Button click={this.props.onRegen}>Regen</Button>\n            <Button click={this.props.onClear}>Clear</Button>\n            <span className=\"stepCount\">Dimensions: {this.props.gridSize} x {this.props.gridSize}</span>\n            <div className=\"slideContainer\">\n              <input className=\"slider\" type=\"range\" min=\"10\" max=\"400\" onChange={this.resize} value={this.props.gridSize}></input>\n            </div>\n            <span className=\"stepCount\">Step Delay: {this.props.stepDelay} ms</span>\n            <div className=\"slideContainer\">\n              <input className=\"slider\" type=\"range\" min=\"1\" max=\"1000\" onChange={this.changeDelay} value={this.props.stepDelay}></input>\n            </div>\n            <span className=\"stepCount\">Steps: {this.props.stepCount}</span>\n            <span className=\"stepCount\">Ms per Step: {this.props.timePerStep}</span>\n          </div>\n          <div className=\"content\">\n            <Grid\n              cellClicked={this.props.onToggleCell}\n              setCell={this.props.onSetCell}\n              cells={this.props.cells}\n              gridSize={this.props.gridSize}>\n            </Grid>\n          </div>\n          <div className=\"rightContent\">\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    cells: state.cells,\n    running: state.running,\n    stepDelay: state.stepDelay,\n    gridSize: state.gridSize,\n    stepCount: state.stepCount,\n    timePerStep: state.timePerStep\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onStart: () => dispatch({ type: actionTypes.START }),\n    onStop: () => dispatch({ type: actionTypes.STOP }),\n    onStep: () => dispatch({ type: actionTypes.STEP }),\n    onRegen: () => dispatch({ type: actionTypes.REGEN }),\n    onResize: (newSize => dispatch({ type: actionTypes.RESIZE, size: newSize })),\n    onChangeDelay: (newDelay => dispatch({ type: actionTypes.DELAY, delay: newDelay })),\n    onClear: () => dispatch({ type: actionTypes.CLEAR }),\n    onToggleCell: (row, column) => dispatch({ type: actionTypes.TOGGLE, row, column }),\n    onSetCell: (row, column, active) => dispatch({ type: actionTypes.SET, row, column, active })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","export const START = 'START';\nexport const STEP = 'STEP';\nexport const STOP = 'STOP';\nexport const REGEN = 'REGEN';\nexport const RESIZE = 'RESIZE';\nexport const DELAY = 'DELAY';\nexport const CLEAR = 'CLEAR';\nexport const TOGGLE = 'TOGGLE';\nexport const SET = 'SET';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n};","import * as actionTypes from './actions/actionTypes';\nimport { updateObject } from './utility.js';\n\nconst genBlank = (gridSize) => {\n  if (gridSize < 1) {\n    gridSize = 1;\n  }\n  const cells = new Array(gridSize);\n  for (var i = 0; i < gridSize; i++) {\n    const row = new Array(gridSize);\n    for (var j = 0; j < gridSize; j++) {\n      row[j] = 0;\n    }\n    cells[i] = row;\n  }\n  return cells;\n}\n\nconst initialState = {\n  gridSize: 40,\n  cells: genBlank(40),\n  stepCount: 0,\n  timePerStep: 0,\n  startStep: 0,\n  stepDelay: 10,\n  running: false\n};\n\nconst genRandom = (gridSize) => {\n  const cells = new Array(gridSize);\n  for (var i = 0; i < gridSize; i++) {\n    const row = new Array(gridSize);\n    for (var j = 0; j < gridSize; j++) {\n      row[j] = Math.random() > .5 ? 1 : 0;\n    }\n    cells[i] = row;\n  }\n  return cells;\n}\n\nconst numberOfNeighbors = (cells, row, column, gridSize) => {\n  var number = 0;\n\n  for (var r = row - 1; r <= row + 1; r++) {\n    for (var c = column - 1; c <= column + 1; c++) {\n      const wrapRow = r < 0 ? gridSize - 1 : r > gridSize - 1 ? 0 : r;\n      const wrapColumn = c < 0 ? gridSize - 1 : c > gridSize - 1 ? 0 : c;\n      if (row === wrapRow && column === wrapColumn) {\n        continue;\n      }\n\n      if (cells[wrapRow][wrapColumn]) {\n        number++;\n        if (number > 3) {\n          return number;\n        }\n      }\n    }\n  }\n\n  return number;\n}\n\nconst newCellValue = (cells, row, column, gridSize) => {\n  var number = numberOfNeighbors(cells, row, column, gridSize);\n\n  if (number === 3) {\n    return true;\n  }\n\n  return (number === 2 && cells[row][column]);\n}\n\nconst copyCells = (state, newSize, oldSize) => {\n  if (!oldSize) {\n    oldSize = newSize;\n  }\n  const cells = genBlank(newSize);\n  for (var i = 0; i < newSize; i++) {\n    cells[i] = new Array(newSize);\n    for (var j = 0; j < newSize; j++) {\n      let val = (i < state.cells.length && j < state.cells[i].length) ? state.cells[i][j] : 0;\n      cells[i][j] = val;\n    }\n  }\n  return cells;\n}\n\nconst toggleCellHandler = (state, row, column) => {\n  return setCellHandler(state, row, column, state.cells[row][column] ? 0 : 1);\n}\n\nconst setCellHandler = (state, row, column, active) => {\n  if (state.cells[row][column] === active) {\n    return {};\n  }\n\n  const cells = copyCells(state, state.gridSize);\n  cells[row][column] = active;\n\n  return {\n    cells\n  };\n}\n\nconst getTimePerStep = (state) => {\n  if (state.stepCount === state.startStep) {\n    return 0;\n  }\n  const stopTime = new Date().getTime();\n  return Math.floor((stopTime - state.startTime) / (state.stepCount - state.startStep));\n}\n\nconst step = (state) => {\n\n  const gridSize = state.gridSize;\n  const stepCount = state.stepCount + 1;\n  const cells = genBlank(gridSize);\n\n  for (var i = 0; i < gridSize; i++) {\n    for (var j = 0; j < gridSize; j++) {\n      cells[i][j] = newCellValue(state.cells, i, j, gridSize);\n    }\n  }\n\n  const timePerStep = getTimePerStep(state);\n\n  return {\n    cells: cells,\n    stepCount: stepCount,\n    timePerStep: timePerStep\n  };\n}\n\nconst stop = (state) => {\n  const timePerStep = getTimePerStep(state);\n  return {\n    timePerStep: timePerStep,\n    running: false\n  };\n}\n\nconst regen = (state) => {\n  const cells = genRandom(state.gridSize);\n  return {\n    cells: cells,\n    stepCount: 0\n  };\n}\n\nconst resize = (newSize, state) => {\n  const newCells = copyCells(state, newSize, state.gridSize);\n  return {\n    gridSize: newSize,\n    cells: newCells\n  };\n}\n\nconst clear = (state) => {\n  const cells = genBlank(state.gridSize);\n  return {\n    cells: cells,\n    stepCount: 0\n  };\n}\n\nconst changeDelay = (delay) => {\n  return {\n    stepDelay: delay\n  };\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.START:\n      return updateObject(\n        state,\n        {\n          running: true,\n          startTime: new Date().getTime(),\n          startStep: state.stepCount\n        });\n\n    case actionTypes.STEP:\n      return updateObject(\n        state,\n        step(state)\n      );\n\n    case actionTypes.STOP:\n      return updateObject(\n        state,\n        stop(state)\n      );\n\n    case actionTypes.REGEN:\n      return updateObject(\n        state,\n        regen(state)\n      )\n\n    case actionTypes.RESIZE:\n      return updateObject(\n        state,\n        resize(action.size, state)\n      );\n\n    case actionTypes.DELAY:\n      return updateObject(\n        state,\n        changeDelay(action.delay)\n      );\n\n    case actionTypes.CLEAR:\n      return updateObject(\n        state,\n        clear(state)\n      );\n\n    case actionTypes.TOGGLE:\n      return updateObject(\n        state,\n        toggleCellHandler(state, action.row, action.column)\n      );\n\n    case actionTypes.SET:\n      return updateObject(\n        state,\n        setCellHandler(state, action.row, action.column, action.active)\n      );\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport reducer from './store/reducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}